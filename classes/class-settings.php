<?php

/**
 * Adds settings page.
 *
 * Original code generated by the WordPress Option Page generator:
 * @link https://jeremyhixon.com/tool/wordpress-option-page-generator/
 */
class Mai_User_Post_Settings {
	private $options;

	/**
	 * Construct the class.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function __construct() {
		add_action( 'admin_menu', [ $this, 'add_menu_item' ], 12 );
		add_action( 'admin_init', [ $this, 'init' ] );
	}

	/**
	 * Adds menu item for settings page.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function add_menu_item() {
		add_submenu_page(
			'edit.php?post_type=mai_user',
			__( 'Mai User Post', 'mai-user-post' ), // page_title
			__( 'Settings', 'mai-user-post' ), // menu_title
			'manage_options', // capability
			'mai-user-post', // menu_slug
			[ $this, 'add_content' ], // callback
		);
	}

	/**
	 * Adds setting page content.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function add_content() {
		$this->options = maiup_get_options();

		echo '<div class="wrap">';
			printf( '<h2>%s</h2>', __( 'Mai User Post', 'mai-user-post' ) );
			// printf( '<p>%s</p>', __( 'Connect your WordPress website to Matomo Analytics.', 'mai-user-post' ) );

			echo '<form method="post" action="options.php">';
				settings_fields( 'maiup_settings_group' );
				do_settings_sections( 'maiup-section' );
				submit_button();
			echo '</form>';
		echo '</div>';
	}

	/**
	 * Initialize the settings.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function init() {
		register_setting(
			'maiup_settings_group', // option_group
			'mai_user_post', // option_name
			[ $this, 'maiup_sanitize' ] // sanitize_callback
		);

		add_settings_section(
			'maiup_settings', // id
			'', // title
			[ $this, 'maiup_section_info' ], // callback
			'maiup-section' // page
		);

		add_settings_field(
			'plural', // id
			__( 'Plural Label', 'mai-user-post' ), // title
			[ $this, 'plural_callback' ], // callback
			'maiup-section', // page
			'maiup_settings' // section
		);

		add_settings_field(
			'singular', // id
			__( 'Singular Label', 'mai-user-post' ), // title
			[ $this, 'singular_callback' ], // callback
			'maiup-section', // page
			'maiup_settings' // section
		);

		add_settings_field(
			'base', // id
			__( 'Permalink Base', 'mai-user-post' ), // title
			[ $this, 'base_callback' ], // callback
			'maiup-section', // page
			'maiup_settings' // section
		);

		add_settings_field(
			'roles', // id
			__( 'User Roles', 'mai-user-post' ), // title
			[ $this, 'roles_callback' ], // callback
			'maiup-section', // page
			'maiup_settings' // section
		);

		add_settings_field(
			'field_groups', // id
			__( 'ACF Field Groups', 'mai-user-post' ), // title
			[ $this, 'field_groups_callback' ], // callback
			'maiup-section', // page
			'maiup_settings' // section
		);


		if ( class_exists( 'WooCommerce' ) ) {

			add_settings_field(
				'woocommerce_account', // id
				__( 'WooCommerce Account', 'mai-user-post' ), // title
				[ $this, 'woocommerce_account_callback' ], // callback
				'maiup-section', // page
				'maiup_settings' // section
			);

			if ( maiup_get_option( 'woocommerce_account' ) ) {
				add_settings_field(
					'woocommerce_menu', // id
					__( 'WooCommerce Menu Title', 'mai-user-post' ), // title
					[ $this, 'woocommerce_menu_callback' ], // callback
					'maiup-section', // page
					'maiup_settings' // section
				);
			}
		}
	}

	/**
	 * Sanitized saved values.
	 *
	 * @param array $input
	 *
	 * @return array
	 */
	public function maiup_sanitize( $input ) {
		return maiup_sanitize_options( $input );
	}

	/**
	 * Displays HTML before settings.
	 *
	 * @return string
	 */
	public function maiup_section_info() {}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function plural_callback() {
		printf( '<input class="regular-text" type="text" name="mai_user_post[plural]" id="plural" value="%s">', maiup_get_option( 'plural' ) );
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function singular_callback() {
		printf( '<input class="regular-text" type="text" name="mai_user_post[singular]" id="singular" value="%s">', maiup_get_option( 'singular' ) );
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function base_callback() {
		printf( '<input class="regular-text" type="text" name="mai_user_post[base]" id="base" value="%s">', maiup_get_option( 'base' ) );
		printf( '<p>%s</p>', __( 'Visit Dashboard > Settings > Permalinks and hit "Save Changes" to flush permalinks after changing this setting.', 'mai-user-post' ) );
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function roles_callback() {
		$roles   = wp_roles()->roles;
		$options = maiup_get_option( 'roles' );

		printf( '<p>%s</p>', __( 'User roles that have a synced post.', 'maitowne' ) );
		echo '<ul style="max-width:25em;height:10em;overflow-y:auto;resize:vertical;padding:1em;background:white;">';
		foreach ( $roles as $key => $role ) {
			printf(
				'<li><label><input type="checkbox" name="mai_user_post[roles][]" value="%s"%s> %s</label><li>',
				$key,
				in_array( $key, $options ) ? ' checked' : '',
				$role['name']
			);
		}
		echo '</ul>';
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function field_groups_callback() {
		$groups = function_exists( 'acf_get_field_groups' ) ? acf_get_field_groups() : [];

		if ( ! $groups ) {
			printf( '<p>%s<p>', __( 'No ACF Field Groups available', 'mai-user-post' ) );
		}

		$options = maiup_get_option( 'field_groups' );

		printf( '<p>%s</p>', __( 'Additional ACF field groups used for editing a post.', 'maitowne' ) );
		echo '<ul style="max-width:25em;height:10em;overflow-y:auto;resize:vertical;padding:1em;background:white;">';
		foreach ( $groups as $group ) {
			printf(
				'<li><label><input type="checkbox" name="mai_user_post[field_groups][]" value="%s"%s> %s</label><li>',
				$group['key'],
				in_array( $group['key'], $options ) ? ' checked' : '',
				$group['title']
			);
		}
		echo '</ul>';
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function woocommerce_account_callback() {
		$option = maiup_get_option( 'woocommerce_account' );

		printf(
			'<input type="checkbox" name="mai_user_post[woocommerce_account]" id="woocommerce_account" value="woocommerce_account"%s> <label for="woocommerce_account">%s</label>',
			$option ? ' checked' : '',
			__( 'Enable post editing in WooCommerce Account', 'mai-analytics' )
		);
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function woocommerce_menu_callback() {
		printf( '<input class="regular-text" type="text" name="mai_user_post[woocommerce_menu]" id="woocommerce_menu" placeholder="%s" value="%s">', maiup_get_option( 'singular' ) . ' ' . __( 'Details', 'mai-user-post' ), maiup_get_option( 'woocommerce_menu' ) );
	}
}